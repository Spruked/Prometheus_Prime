CREATE TABLE beta_intake_log (
    entry_id UUID PRIMARY KEY,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    full_name VARCHAR(100),
    email VARCHAR(150),
    phone VARCHAR(30),
    domain_interest VARCHAR(50), -- Prometheus / Cato / Archimedes
    skills_experience TEXT,
    why_join TEXT,
    ai_goals TEXT,
    availability TEXT,
    status VARCHAR(20) DEFAULT 'pending', -- enum: pending, approved, rejected, follow-up
    notes TEXT
);
# SPRUKED Master Folder Structure

📁 SPRUKED-HQ/
│
├── prometheus/           # AI Core Ops
│   ├── api/
│   ├── core/
│   ├── models/
│   ├── vault/
│   └── docs/
│
├── cato/                 # Ethics & Justice Ops
│   ├── charters/
│   ├── enforcement/
│   └── ethics-reviews/
│
├── archimedes/           # Technical & Logic Ops
│   ├── automation/
│   ├── diagnostics/
│   └── scripts/
│
├── installops/           # Install & Tech Teams
│   ├── work-orders/
│   ├── checklists/
│   └── technician-guides/
│
├── customer-service/
│   ├── tickets/
│   ├── responses/
│   └── SOPs/
│
├── brand-assets/
│   ├── logos/
│   ├── font-pack/
│   └── press-kit/
│
└── legal-comms/
    ├── contracts/
    ├── filings/
    └── email-records/
# Email Alias Strategy – SPRUKED Ecosystem

Domains: spruked.com, spruked.cloud, spruked.info, spruked.org

## Planned Primary Inboxes (1 per domain):
- main@spruked.com
- main@spruked.cloud
- main@spruked.org
- main@spruked.info

## Forwarding Targets (10 per domain limit):
- prometheus@spruked.com → main@spruked.com
- cato@spruked.com → main@spruked.com
- archimedes@spruked.com → main@spruked.com
- support@spruked.com → helpdesk@gmail.com
- install@spruked.com → main@spruked.com
- admin@spruked.com → main@spruked.com

### Notes:
- Leave undeployed until active service layer requires inbox use.
- Avoid over-splitting until domain use scales.
// auth_server.js
const express = require('express');
const { auth } = require('express-oauth2-jwt-bearer');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3001;

// 🔐 Middleware: Validate Auth0 JWTs
const checkJwt = auth({
  audience: 'https://prometheus-prime.ai',
  issuerBaseURL: `https://${process.env.AUTH0_DOMAIN}/`,
  tokenSigningAlg: 'RS256',
});

// 🎭 Role-based guard
function roleGuard(requiredRole) {
  return (req, res, next) => {
    const roles = req.auth?.payload['https://prometheus-prime.ai/roles'] || [];
    if (!roles.includes(requiredRole)) {
      return res.status(403).send('Access denied');
    }
    next();
  };
}

// 🔐 Routes
app.get('/access/files', checkJwt, roleGuard('file_agent'), (req, res) => {
  res.send('Access granted to file directory X');
});

app.get('/access/schedule', checkJwt, roleGuard('schedule_reader'), (req, res) => {
  res.send('Reading schedule data...');
});

app.get('/', (req, res) => {
  res.send('🔐 Prometheus Prime Auth Core is live');
});

app.listen(port, () => {
  console.log(`🔐 Auth server running at http://localhost:${port}`);
});
from flask import Flask, request, jsonify
from flask_jwt_extended import JWTManager, get_jwt, verify_jwt_in_request
from functools import wraps

app = Flask(__name__)
app.config['JWT_SECRET_KEY'] = 'super-secret'
jwt = JWTManager(app)

def role_required(role):
    def wrapper(fn):
        @wraps(fn)
        def decorator(*args, **kwargs):
            verify_jwt_in_request()
            claims = get_jwt()
            if role not in claims.get('roles', []):
                return jsonify(msg='Access denied'), 403
            return fn(*args, **kwargs)
        return decorator
    return wrapper

@app.route('/access/files')
@role_required('file_agent')
def get_files():
    return jsonify(message="Access granted to file directory X")
import requests
import uuid

VAULT_ID = "cdb87230-e4a1-401b-9f94-349c44f33d1a"  # Replace with dynamic vault ID later
API_URL = f"http://127.0.0.1:5000/vaults/{VAULT_ID}/messages"

def generate_message():
    # This would normally come from GPT or another AI source
    return "This is an automated log message from Prometheus AI agent."

def send_message():
    data = {
        "content": generate_message(),
        "media_url": ""
    }

    response = requests.post(API_URL, json=data)
    if response.status_code == 201:
        print("✅ Message sent successfully:")
        print(response.json())
    else:
        print("❌ Failed to send message:")
        print(response.status_code, response.text)

if __name__ == "__main__":
    send_message()
import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";

export default function ParentalControls() {
  const [controls, setControls] = useState({
    contentFilter: true,
    screenTimeLimit: false,
    timeLimitHours: 2,
    bedtimeLock: false,
    bedtimeHour: "21:00",
    pin: ""
  });

  const toggleControl = (key) => {
    setControls((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const handleChange = (key, value) => {
    setControls((prev) => ({ ...prev, [key]: value }));
  };

  return (
    <Card className="p-4 shadow-xl max-w-2xl mx-auto mt-10">
      <CardContent className="space-y-6">
        <h2 className="text-2xl font-bold">Parental Controls</h2>

        <Tabs defaultValue="settings">
          <TabsList className="grid grid-cols-2">
            <TabsTrigger value="settings">Settings</TabsTrigger>
            <TabsTrigger value="security">Security</TabsTrigger>
          </TabsList>

          <TabsContent value="settings" className="space-y-4">
            <div className="flex items-center justify-between">
              <Label>Content Filter</Label>
              <Switch checked={controls.contentFilter} onCheckedChange={() => toggleControl("contentFilter")} />
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Screen Time Limit</Label>
                <Switch checked={controls.screenTimeLimit} onCheckedChange={() => toggleControl("screenTimeLimit")} />
              </div>
              {controls.screenTimeLimit && (
                <Input
                  type="number"
                  min="1"
                  max="12"
                  value={controls.timeLimitHours}
                  onChange={(e) => handleChange("timeLimitHours", e.target.value)}
                  placeholder="Hours per day"
                />
              )}
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Bedtime Lock</Label>
                <Switch checked={controls.bedtimeLock} onCheckedChange={() => toggleControl("bedtimeLock")} />
              </div>
              {controls.bedtimeLock && (
                <Input
                  type="time"
                  value={controls.bedtimeHour}
                  onChange={(e) => handleChange("bedtimeHour", e.target.value)}
                />
              )}
            </div>
          </TabsContent>

          <TabsContent value="security" className="space-y-4">
            <div className="space-y-2">
              <Label>Set Parental PIN</Label>
              <Input
                type="password"
                value={controls.pin}
                onChange={(e) => handleChange("pin", e.target.value)}
                placeholder="Enter a 4-digit PIN"
                maxLength={4}
              />
            </div>
            <Button className="w-full">Save Settings</Button>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}
